#Build a Docker image for your app
#Push it to GHCR (ghcr.io/Sobianf/team-tasks:<commit-sha>)
#SSH into your VM and deploy it with a light blue/green swap and a /api/healthz check
name: Build & Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write   # lets GITHUB_TOKEN push to GHCR

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.out.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      # Make lowercase repo; docker/ghcr require lowercase names
      - name: Compute image tag
        run: |
          echo "IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Log in to GHCR (GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
            docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}" \
            -t "$IMAGE" .

      - name: Push image
        run: docker push "$IMAGE"

      - id: out
        name: Export image ref
        run: echo "image=$IMAGE" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ needs.build.outputs.image }}
    steps:
      - name: Write SSH key
        run: |
          echo "${{ secrets.VM_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy on VM
        run: |
          HOST="${{ secrets.VM_HOST }}"
          USER="${{ secrets.VM_USER }}"
          PORT="${{ secrets.VM_SSH_PORT || 22 }}"

          # Use the same short-lived GITHUB_TOKEN to pull on the VM for this deploy
          ACTOR="${{ github.actor }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"

          ssh -o StrictHostKeyChecking=no -i key.pem -p "$PORT" "$USER@$HOST" "bash -s" <<SH
          set -euxo pipefail

          IMAGE="${IMAGE}"

          sudo docker login ghcr.io -u "$ACTOR" -p "$TOKEN"
          sudo mkdir -p /opt/team-tasks
          cd /opt/team-tasks

          # rebuild .env from secrets (only those present)
          rm -f .env; touch .env
          [ -n "${{ secrets.SUPABASE_URL }}" ] && echo 'SUPABASE_URL=${{ secrets.SUPABASE_URL }}'           | sudo tee -a .env >/dev/null || true
          [ -n "${{ secrets.SUPABASE_ANON_KEY }}" ] && echo 'SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}' | sudo tee -a .env >/dev/null || true
          [ -n "${{ secrets.SERVICE_ROLE_KEY }}" ] && echo 'SERVICE_ROLE_KEY=${{ secrets.SERVICE_ROLE_KEY }}'   | sudo tee -a .env >/dev/null || true
          echo 'NODE_ENV=production' | sudo tee -a .env >/dev/null

          sudo docker pull "$IMAGE"

          # blue/green-lite: test on 8080, then swap to 80
          sudo docker rm -f app_new || true
          sudo docker run -d --name app_new --restart unless-stopped --env-file .env -p 8080:3000 "$IMAGE"

          ok=
          for i in {1..10}; do curl -fsS http://localhost:8080/api/healthz && ok=1 && break || sleep 2; done
          if [ -z "\$ok" ]; then echo "Health check failed" >&2; sudo docker logs app_new || true; exit 1; fi

          sudo docker rm -f app || true
          sudo docker run -d --name app --restart unless-stopped --env-file .env -p 80:3000 "$IMAGE"
          sudo docker rm -f app_new || true

